import argparse
import pickle
import numpy as np 
import itertools
import random

def parse_args():
    parser=argparse.ArgumentParser()
    parser.add_argument("--gc_content_pickle_positives",help='generated by script get_chrom_gc_region_dict.py')
    parser.add_argument("--gc_content_pickle_negatives",help='generated by script get_chrom_gc_region_dict.py')
    parser.add_argument("--n_negatives_per_positive",type=int,default=1,help="how many gc-matched negatives should be generated for each positive")
    parser.add_argument("--tolerance",type=float,default=0.02,help="allowed margin for gc content agreement; ie if set to 0.02, gc content of 0.48 - 0.52 is acceptable as a match to positive region having gc 0.50")
    parser.add_argument("--outf")
    return parser.parse_args()

def main():
    args=parse_args()
    gc_dict_positives=pickle.load(open(args.gc_content_pickle_positives,'rb'))
    print("loaded gc content positives")
    gc_dict_negatives=pickle.load(open(args.gc_content_pickle_negatives,'rb'))
    print("loaded gc content negatives")
    
    outf=open(args.outf,'w')
    used=[] 
    #keep track of negative regions that have been used so we don't duplicate 
    for key in gc_dict_positives:
        print("key:"+str(key))
        num_positives=len(gc_dict_positives[key])
        num_negatives=args.n_negatives_per_positive*num_positives
        #get pool of negatives to sample from
        print(args.tolerance) 
        pool=list(np.arange(key-args.tolerance,key+args.tolerance,0.01))
        candidates=[]
        for i in pool:
            if i in gc_dict_negatives:
                candidates=candidates+gc_dict_negatives[i]
        print(len(candidates))
        #sample n negatives from the pool
        used=used+[i for i in random.sample(candidates,min([len(candidates),num_negatives]))]
    used=list(set(used))
    outf=open(args.outf,'w')
    outf.write('\n'.join(used)+'\n')
    outf.close()
    
        
        

if __name__=="__main__":
    main()
    
